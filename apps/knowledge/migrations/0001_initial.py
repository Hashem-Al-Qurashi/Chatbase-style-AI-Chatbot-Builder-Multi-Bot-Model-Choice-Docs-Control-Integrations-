# Generated by Django 4.2.7 on 2025-10-03 19:40

import apps.core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("chatbots", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="KnowledgeSource",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "content_type",
                    models.CharField(
                        choices=[
                            ("pdf", "PDF Document"),
                            ("docx", "Word Document"),
                            ("txt", "Text File"),
                            ("url", "Web Page"),
                            ("video", "Video"),
                        ],
                        max_length=20,
                    ),
                ),
                (
                    "file_path",
                    models.CharField(
                        blank=True,
                        help_text="S3 key or file path",
                        max_length=500,
                        null=True,
                    ),
                ),
                (
                    "file_size",
                    models.PositiveIntegerField(
                        blank=True, help_text="File size in bytes", null=True
                    ),
                ),
                (
                    "file_hash",
                    models.CharField(
                        blank=True,
                        help_text="SHA-256 hash for deduplication",
                        max_length=64,
                        null=True,
                    ),
                ),
                ("mime_type", models.CharField(blank=True, max_length=100, null=True)),
                (
                    "source_url",
                    models.URLField(
                        blank=True, help_text="URL for web pages or videos", null=True
                    ),
                ),
                (
                    "is_citable",
                    models.BooleanField(
                        default=True,
                        help_text="CRITICAL: Can this source be cited and shown to users?",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "error_message",
                    models.TextField(
                        blank=True,
                        help_text="Error details if processing failed",
                        null=True,
                    ),
                ),
                ("processed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "chunk_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of chunks created from this source"
                    ),
                ),
                (
                    "token_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total tokens in processed content"
                    ),
                ),
                (
                    "content_preview",
                    models.TextField(
                        blank=True,
                        help_text="First 500 characters for preview",
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict, help_text="Processing metadata and source info"
                    ),
                ),
                (
                    "chatbot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="knowledge_sources",
                        to="chatbots.chatbot",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Knowledge Source",
                "verbose_name_plural": "Knowledge Sources",
                "db_table": "knowledge_sources",
            },
        ),
        migrations.CreateModel(
            name="KnowledgeChunk",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("content", models.TextField(help_text="The actual text content")),
                (
                    "content_hash",
                    models.CharField(
                        help_text="SHA-256 hash for deduplication", max_length=64
                    ),
                ),
                (
                    "chunk_index",
                    models.PositiveIntegerField(
                        help_text="Order of this chunk within the source"
                    ),
                ),
                (
                    "start_char",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Start character position in original content",
                        null=True,
                    ),
                ),
                (
                    "end_char",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="End character position in original content",
                        null=True,
                    ),
                ),
                (
                    "is_citable",
                    models.BooleanField(
                        help_text="CRITICAL: Inherited from source - can this be cited?"
                    ),
                ),
                (
                    "token_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Number of tokens in this chunk"
                    ),
                ),
                (
                    "embedding_vector",
                    models.JSONField(
                        blank=True,
                        help_text="Vector embedding for similarity search",
                        null=True,
                    ),
                ),
                (
                    "embedding_model",
                    models.CharField(
                        blank=True,
                        help_text="Model used to generate embedding",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict,
                        help_text="Chunk-specific metadata (page, section, etc.)",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chunks",
                        to="knowledge.knowledgesource",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Knowledge Chunk",
                "verbose_name_plural": "Knowledge Chunks",
                "db_table": "knowledge_chunks",
            },
        ),
        migrations.CreateModel(
            name="CitationUsage",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "conversation_id",
                    models.UUIDField(
                        help_text="ID of conversation where this was cited"
                    ),
                ),
                (
                    "message_id",
                    models.UUIDField(
                        help_text="ID of specific message that cited this"
                    ),
                ),
                (
                    "query",
                    models.TextField(help_text="User query that triggered citation"),
                ),
                (
                    "relevance_score",
                    models.FloatField(help_text="Similarity score for this citation"),
                ),
                (
                    "chatbot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="citation_usage",
                        to="chatbots.chatbot",
                    ),
                ),
                (
                    "chunk",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="citations",
                        to="knowledge.knowledgechunk",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="citations",
                        to="knowledge.knowledgesource",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Citation Usage",
                "verbose_name_plural": "Citation Usage",
                "db_table": "citation_usage",
            },
        ),
        migrations.CreateModel(
            name="ProcessingJob",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "job_type",
                    models.CharField(
                        choices=[
                            ("extract_text", "Extract Text"),
                            ("generate_chunks", "Generate Chunks"),
                            ("generate_embeddings", "Generate Embeddings"),
                            ("url_crawl", "Crawl URL"),
                            ("video_transcribe", "Transcribe Video"),
                        ],
                        max_length=50,
                    ),
                ),
                (
                    "celery_task_id",
                    models.CharField(
                        blank=True,
                        help_text="Celery task ID for tracking",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                (
                    "progress_percentage",
                    models.FloatField(
                        default=0.0, help_text="Processing progress (0-100)"
                    ),
                ),
                (
                    "result_data",
                    apps.core.models.JSONField(
                        default=dict, help_text="Job results and metadata"
                    ),
                ),
                (
                    "error_details",
                    models.TextField(
                        blank=True, help_text="Detailed error information", null=True
                    ),
                ),
                ("started_at", models.DateTimeField(blank=True, null=True)),
                ("completed_at", models.DateTimeField(blank=True, null=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "source",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="processing_jobs",
                        to="knowledge.knowledgesource",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Processing Job",
                "verbose_name_plural": "Processing Jobs",
                "db_table": "processing_jobs",
                "indexes": [
                    models.Index(
                        fields=["source"], name="processing__source__eca4a1_idx"
                    ),
                    models.Index(
                        fields=["celery_task_id"], name="processing__celery__4245d2_idx"
                    ),
                    models.Index(
                        fields=["status"], name="processing__status_96bb49_idx"
                    ),
                    models.Index(
                        fields=["created_at"], name="processing__created_7e276e_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(
                fields=["chatbot"], name="knowledge_s_chatbot_e80fa0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(
                fields=["content_type"], name="knowledge_s_content_cf2b22_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(fields=["status"], name="knowledge_s_status_1d844c_idx"),
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(
                fields=["is_citable"], name="knowledge_s_is_cita_81863a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(
                fields=["file_hash"], name="knowledge_s_file_ha_7cb6c8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgesource",
            index=models.Index(
                fields=["created_at"], name="knowledge_s_created_1e7fb4_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="knowledgesource",
            constraint=models.UniqueConstraint(
                condition=models.Q(("file_hash__isnull", False)),
                fields=("chatbot", "file_hash"),
                name="unique_file_per_chatbot",
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgechunk",
            index=models.Index(
                fields=["source"], name="knowledge_c_source__4e3be8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgechunk",
            index=models.Index(
                fields=["source", "chunk_index"], name="knowledge_c_source__7ee7ac_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgechunk",
            index=models.Index(
                fields=["is_citable"], name="knowledge_c_is_cita_7ec034_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgechunk",
            index=models.Index(
                fields=["content_hash"], name="knowledge_c_content_5d0ed0_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="knowledgechunk",
            index=models.Index(
                fields=["created_at"], name="knowledge_c_created_a98352_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="knowledgechunk",
            constraint=models.UniqueConstraint(
                fields=("source", "chunk_index"), name="unique_chunk_index_per_source"
            ),
        ),
        migrations.AddConstraint(
            model_name="knowledgechunk",
            constraint=models.UniqueConstraint(
                fields=("source", "content_hash"),
                name="unique_chunk_content_per_source",
            ),
        ),
        migrations.AddIndex(
            model_name="citationusage",
            index=models.Index(
                fields=["chatbot", "created_at"], name="citation_us_chatbot_2eef69_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationusage",
            index=models.Index(
                fields=["source", "created_at"], name="citation_us_source__30bef3_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationusage",
            index=models.Index(
                fields=["conversation_id"], name="citation_us_convers_2ab8c9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="citationusage",
            index=models.Index(
                fields=["created_at"], name="citation_us_created_1c2b82_idx"
            ),
        ),
    ]
