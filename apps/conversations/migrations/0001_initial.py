# Generated by Django 4.2.7 on 2025-10-03 19:40

import apps.core.models
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ("chatbots", "0001_initial"),
        ("knowledge", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="Conversation",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "session_id",
                    models.UUIDField(
                        default=uuid.uuid4, help_text="Unique session identifier"
                    ),
                ),
                (
                    "user_identifier",
                    models.CharField(
                        blank=True,
                        help_text="Anonymous user identifier (IP hash, fingerprint, etc.)",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        blank=True, help_text="User IP address", null=True
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        blank=True, help_text="User agent string", null=True
                    ),
                ),
                (
                    "lead_email",
                    models.EmailField(
                        blank=True,
                        help_text="Email if lead was captured",
                        max_length=254,
                        null=True,
                    ),
                ),
                (
                    "lead_name",
                    models.CharField(
                        blank=True,
                        help_text="Name if lead was captured",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "lead_phone",
                    models.CharField(
                        blank=True,
                        help_text="Phone if lead was captured",
                        max_length=20,
                        null=True,
                    ),
                ),
                (
                    "lead_captured_at",
                    models.DateTimeField(
                        blank=True, help_text="When lead was captured", null=True
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        blank=True,
                        help_text="Auto-generated conversation title",
                        max_length=255,
                    ),
                ),
                (
                    "language",
                    models.CharField(
                        default="en",
                        help_text="Detected conversation language",
                        max_length=10,
                    ),
                ),
                (
                    "message_count",
                    models.PositiveIntegerField(
                        default=0, help_text="Total messages in conversation"
                    ),
                ),
                (
                    "user_satisfaction",
                    models.FloatField(
                        blank=True,
                        help_text="User satisfaction rating (1-5)",
                        null=True,
                    ),
                ),
                (
                    "satisfaction_feedback",
                    models.TextField(
                        blank=True, help_text="User feedback text", null=True
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True, help_text="Is conversation still active"
                    ),
                ),
                (
                    "ended_at",
                    models.DateTimeField(
                        blank=True, help_text="When conversation ended", null=True
                    ),
                ),
                (
                    "data_retention_days",
                    models.PositiveIntegerField(
                        default=90, help_text="Days to retain conversation data"
                    ),
                ),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict, help_text="Additional conversation metadata"
                    ),
                ),
                (
                    "chatbot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="conversations",
                        to="chatbots.chatbot",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Conversation",
                "verbose_name_plural": "Conversations",
                "db_table": "conversations",
            },
        ),
        migrations.CreateModel(
            name="Message",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("user", "User"),
                            ("assistant", "Assistant"),
                            ("system", "System"),
                        ],
                        max_length=20,
                    ),
                ),
                ("content", models.TextField(help_text="Message content")),
                (
                    "sequence_number",
                    models.PositiveIntegerField(
                        help_text="Message order in conversation"
                    ),
                ),
                (
                    "model_used",
                    models.CharField(
                        blank=True,
                        help_text="LLM model used for response",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Temperature used for generation",
                        null=True,
                    ),
                ),
                (
                    "token_usage",
                    apps.core.models.JSONField(
                        default=dict, help_text="Token usage statistics"
                    ),
                ),
                (
                    "generation_time_ms",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Time taken to generate response in milliseconds",
                        null=True,
                    ),
                ),
                (
                    "is_helpful",
                    models.BooleanField(
                        blank=True,
                        help_text="User feedback on message helpfulness",
                        null=True,
                    ),
                ),
                (
                    "is_flagged",
                    models.BooleanField(
                        default=False, help_text="Message flagged for review"
                    ),
                ),
                (
                    "flag_reason",
                    models.CharField(
                        blank=True,
                        help_text="Reason for flagging",
                        max_length=100,
                        null=True,
                    ),
                ),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict, help_text="Additional message metadata"
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="messages",
                        to="conversations.conversation",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Message",
                "verbose_name_plural": "Messages",
                "db_table": "messages",
            },
        ),
        migrations.CreateModel(
            name="MessageSource",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "relevance_score",
                    models.FloatField(
                        help_text="Similarity/relevance score for this citation"
                    ),
                ),
                (
                    "citation_text",
                    models.TextField(
                        blank=True, help_text="Specific text that was cited", null=True
                    ),
                ),
                (
                    "chunk",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="message_citations",
                        to="knowledge.knowledgechunk",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "message",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="source_citations",
                        to="conversations.message",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Message Source",
                "verbose_name_plural": "Message Sources",
                "db_table": "message_sources",
            },
        ),
        migrations.AddField(
            model_name="message",
            name="sources_cited",
            field=models.ManyToManyField(
                blank=True,
                help_text="Knowledge chunks cited in this message",
                through="conversations.MessageSource",
                to="knowledge.knowledgechunk",
            ),
        ),
        migrations.AddField(
            model_name="message",
            name="updated_by",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)s_updated",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.CreateModel(
            name="ConversationTag",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("tag", models.CharField(help_text="Tag name", max_length=100)),
                (
                    "confidence",
                    models.FloatField(
                        blank=True,
                        help_text="Confidence score for auto-generated tags",
                        null=True,
                    ),
                ),
                (
                    "is_auto_generated",
                    models.BooleanField(
                        default=True, help_text="Was this tag auto-generated?"
                    ),
                ),
                (
                    "conversation",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="tags",
                        to="conversations.conversation",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Conversation Tag",
                "verbose_name_plural": "Conversation Tags",
                "db_table": "conversation_tags",
            },
        ),
        migrations.AddIndex(
            model_name="messagesource",
            index=models.Index(
                fields=["message"], name="message_sou_message_7c6b4e_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="messagesource",
            index=models.Index(fields=["chunk"], name="message_sou_chunk_i_bf1db2_idx"),
        ),
        migrations.AddIndex(
            model_name="messagesource",
            index=models.Index(
                fields=["relevance_score"], name="message_sou_relevan_6cc32d_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="messagesource",
            constraint=models.UniqueConstraint(
                fields=("message", "chunk"), name="unique_message_chunk_citation"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["conversation"], name="messages_convers_8904b4_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["conversation", "sequence_number"],
                name="messages_convers_87537f_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(fields=["role"], name="messages_role_8be1df_idx"),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["is_flagged"], name="messages_is_flag_cc0483_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="message",
            index=models.Index(
                fields=["created_at"], name="messages_created_919c58_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="message",
            constraint=models.UniqueConstraint(
                fields=("conversation", "sequence_number"),
                name="unique_message_sequence",
            ),
        ),
        migrations.AddIndex(
            model_name="conversationtag",
            index=models.Index(
                fields=["conversation"], name="conversatio_convers_972b34_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversationtag",
            index=models.Index(fields=["tag"], name="conversatio_tag_6973f5_idx"),
        ),
        migrations.AddIndex(
            model_name="conversationtag",
            index=models.Index(
                fields=["is_auto_generated"], name="conversatio_is_auto_992e91_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="conversationtag",
            constraint=models.UniqueConstraint(
                fields=("conversation", "tag"), name="unique_conversation_tag"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["chatbot"], name="conversatio_chatbot_b3ffde_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["session_id"], name="conversatio_session_69cb64_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["user_identifier"], name="conversatio_user_id_73c409_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["lead_email"], name="conversatio_lead_em_484650_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["is_active"], name="conversatio_is_acti_a70b65_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="conversation",
            index=models.Index(
                fields=["created_at"], name="conversatio_created_694913_idx"
            ),
        ),
    ]
