# Generated by Django 4.2.7 on 2025-10-03 19:40

import apps.core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="User's email address",
                        max_length=254,
                        unique=True,
                        validators=[django.core.validators.EmailValidator()],
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150)),
                ("last_name", models.CharField(blank=True, max_length=150)),
                ("is_active", models.BooleanField(default=True)),
                ("is_staff", models.BooleanField(default=False)),
                ("is_email_verified", models.BooleanField(default=False)),
                ("email_verified_at", models.DateTimeField(blank=True, null=True)),
                (
                    "plan_tier",
                    models.CharField(
                        choices=[
                            ("free", "Free"),
                            ("pro", "Pro"),
                            ("enterprise", "Enterprise"),
                        ],
                        default="free",
                        max_length=20,
                    ),
                ),
                (
                    "stripe_customer_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                (
                    "subscription_id",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "subscription_status",
                    models.CharField(blank=True, max_length=50, null=True),
                ),
                (
                    "subscription_current_period_end",
                    models.DateTimeField(blank=True, null=True),
                ),
                (
                    "message_quota",
                    models.PositiveIntegerField(
                        default=100, help_text="Monthly message quota"
                    ),
                ),
                (
                    "messages_used",
                    models.PositiveIntegerField(
                        default=0, help_text="Messages used this period"
                    ),
                ),
                (
                    "quota_reset_date",
                    models.DateTimeField(
                        default=django.utils.timezone.now, help_text="When quota resets"
                    ),
                ),
                (
                    "google_id",
                    models.CharField(
                        blank=True, max_length=255, null=True, unique=True
                    ),
                ),
                ("avatar_url", models.URLField(blank=True, null=True)),
                ("timezone", models.CharField(default="UTC", max_length=50)),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict, help_text="Additional user metadata"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "users",
            },
        ),
        migrations.CreateModel(
            name="UserProfile",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("company_name", models.CharField(blank=True, max_length=255)),
                (
                    "company_size",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("1-10", "1-10 employees"),
                            ("11-50", "11-50 employees"),
                            ("51-200", "51-200 employees"),
                            ("201-1000", "201-1000 employees"),
                            ("1000+", "1000+ employees"),
                        ],
                        max_length=50,
                    ),
                ),
                ("industry", models.CharField(blank=True, max_length=255)),
                ("phone", models.CharField(blank=True, max_length=20)),
                ("website", models.URLField(blank=True)),
                ("email_notifications", models.BooleanField(default=True)),
                ("marketing_emails", models.BooleanField(default=True)),
                ("onboarding_completed", models.BooleanField(default=False)),
                ("onboarding_step", models.CharField(blank=True, max_length=50)),
                ("analytics_enabled", models.BooleanField(default=True)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="profile",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Profile",
                "verbose_name_plural": "User Profiles",
                "db_table": "user_profiles",
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "jti",
                    models.CharField(
                        help_text="JWT ID for token revocation",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        choices=[
                            ("access", "Access Token"),
                            ("refresh", "Refresh Token"),
                        ],
                        max_length=20,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True, null=True)),
                ("expires_at", models.DateTimeField()),
                ("revoked_at", models.DateTimeField(blank=True, null=True)),
                ("metadata", apps.core.models.JSONField(default=dict)),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "db_table": "user_sessions",
                "indexes": [
                    models.Index(fields=["jti"], name="user_sessio_jti_d905be_idx"),
                    models.Index(
                        fields=["user", "token_type"],
                        name="user_sessio_user_id_f933c5_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="user_sessio_expires_66ae96_idx"
                    ),
                    models.Index(
                        fields=["revoked_at"], name="user_sessio_revoked_759f1e_idx"
                    ),
                ],
            },
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="users_email_4b85f2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["plan_tier"], name="users_plan_ti_e2b6a8_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["stripe_customer_id"], name="users_stripe__0fdd23_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active", "is_email_verified"],
                name="users_is_acti_9c2147_idx",
            ),
        ),
    ]
