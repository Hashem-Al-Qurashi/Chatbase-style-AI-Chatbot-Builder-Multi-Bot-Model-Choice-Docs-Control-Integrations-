# Generated by Django 4.2.7 on 2025-10-03 19:40

import apps.core.models
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Chatbot",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("name", models.CharField(max_length=255)),
                ("description", models.TextField(blank=True)),
                (
                    "public_url_slug",
                    models.SlugField(
                        help_text="Unique slug for public chatbot URL",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "theme_color",
                    models.CharField(
                        default="#2563EB",
                        help_text="Hex color for chat widget theme",
                        max_length=7,
                    ),
                ),
                (
                    "welcome_message",
                    models.TextField(
                        default="Hello! How can I help you today?",
                        help_text="Initial message shown to users",
                    ),
                ),
                (
                    "placeholder_text",
                    models.CharField(
                        default="Type your message...",
                        help_text="Placeholder text for input field",
                        max_length=255,
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        default=0.7, help_text="LLM temperature for response generation"
                    ),
                ),
                (
                    "max_tokens",
                    models.PositiveIntegerField(
                        default=500, help_text="Maximum tokens in response"
                    ),
                ),
                (
                    "model_name",
                    models.CharField(
                        default="gpt-3.5-turbo",
                        help_text="LLM model to use",
                        max_length=100,
                    ),
                ),
                (
                    "enable_citations",
                    models.BooleanField(
                        default=True,
                        help_text="Show source citations for citable content",
                    ),
                ),
                (
                    "enable_data_collection",
                    models.BooleanField(
                        default=False,
                        help_text="Collect conversation data for analytics",
                    ),
                ),
                (
                    "crm_webhook_url",
                    models.URLField(
                        blank=True,
                        help_text="Webhook URL for pushing leads to CRM",
                        null=True,
                        validators=[django.core.validators.URLValidator()],
                    ),
                ),
                (
                    "crm_webhook_secret",
                    models.CharField(
                        blank=True,
                        help_text="Secret for webhook authentication",
                        max_length=255,
                        null=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("processing", "Processing"),
                            ("completed", "Completed"),
                            ("failed", "Failed"),
                            ("cancelled", "Cancelled"),
                        ],
                        default="pending",
                        max_length=20,
                    ),
                ),
                ("last_trained_at", models.DateTimeField(blank=True, null=True)),
                ("total_conversations", models.PositiveIntegerField(default=0)),
                ("total_messages", models.PositiveIntegerField(default=0)),
                (
                    "metadata",
                    apps.core.models.JSONField(
                        default=dict, help_text="Additional chatbot configuration"
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="chatbots",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chatbot",
                "verbose_name_plural": "Chatbots",
                "db_table": "chatbots",
            },
        ),
        migrations.CreateModel(
            name="ChatbotSettings",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                (
                    "system_prompt",
                    models.TextField(
                        blank=True, help_text="Custom system prompt for the chatbot"
                    ),
                ),
                (
                    "response_guidelines",
                    models.TextField(
                        blank=True,
                        help_text="Guidelines for how the chatbot should respond",
                    ),
                ),
                (
                    "rate_limit_messages_per_hour",
                    models.PositiveIntegerField(
                        default=60, help_text="Max messages per hour per user"
                    ),
                ),
                (
                    "rate_limit_messages_per_day",
                    models.PositiveIntegerField(
                        default=500, help_text="Max messages per day per user"
                    ),
                ),
                ("enable_profanity_filter", models.BooleanField(default=True)),
                ("enable_spam_detection", models.BooleanField(default=True)),
                (
                    "blocked_words",
                    models.JSONField(
                        default=list, help_text="List of blocked words/phrases"
                    ),
                ),
                ("enable_sentiment_analysis", models.BooleanField(default=False)),
                ("enable_topic_extraction", models.BooleanField(default=False)),
                ("enable_lead_capture", models.BooleanField(default=False)),
                (
                    "lead_capture_trigger",
                    models.CharField(
                        choices=[
                            ("immediate", "Immediately"),
                            ("after_messages", "After N messages"),
                            ("keyword", "On keyword trigger"),
                            ("manual", "Manual trigger only"),
                        ],
                        default="manual",
                        max_length=50,
                    ),
                ),
                (
                    "lead_capture_message",
                    models.TextField(
                        default="Would you like to leave your contact information for follow-up?",
                        help_text="Message shown when capturing leads",
                    ),
                ),
                (
                    "show_powered_by",
                    models.BooleanField(
                        default=True,
                        help_text="Show 'Powered by Your Platform' branding",
                    ),
                ),
                (
                    "custom_css",
                    models.TextField(
                        blank=True, help_text="Custom CSS for widget styling"
                    ),
                ),
                (
                    "chatbot",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="settings",
                        to="chatbots.chatbot",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chatbot Settings",
                "verbose_name_plural": "Chatbot Settings",
                "db_table": "chatbot_settings",
            },
        ),
        migrations.CreateModel(
            name="ChatbotAnalytics",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True, db_index=True)),
                (
                    "deleted_at",
                    models.DateTimeField(blank=True, db_index=True, null=True),
                ),
                (
                    "id",
                    models.UUIDField(
                        default=uuid.uuid4,
                        editable=False,
                        primary_key=True,
                        serialize=False,
                    ),
                ),
                ("date", models.DateField()),
                ("hour", models.PositiveSmallIntegerField(blank=True, null=True)),
                ("unique_visitors", models.PositiveIntegerField(default=0)),
                ("total_conversations", models.PositiveIntegerField(default=0)),
                ("total_messages", models.PositiveIntegerField(default=0)),
                ("avg_conversation_length", models.FloatField(default=0.0)),
                ("avg_response_time", models.FloatField(default=0.0)),
                (
                    "bounce_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="Percentage of users who left after first message",
                    ),
                ),
                (
                    "user_satisfaction",
                    models.FloatField(
                        blank=True,
                        help_text="Average user satisfaction score",
                        null=True,
                    ),
                ),
                ("leads_captured", models.PositiveIntegerField(default=0)),
                (
                    "conversion_rate",
                    models.FloatField(
                        default=0.0,
                        help_text="Percentage of conversations that captured leads",
                    ),
                ),
                (
                    "top_queries",
                    models.JSONField(
                        default=list, help_text="Most common user queries"
                    ),
                ),
                (
                    "top_sources_cited",
                    models.JSONField(
                        default=list,
                        help_text="Most frequently cited knowledge sources",
                    ),
                ),
                (
                    "chatbot",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="analytics",
                        to="chatbots.chatbot",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_created",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "updated_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)s_updated",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Chatbot Analytics",
                "verbose_name_plural": "Chatbot Analytics",
                "db_table": "chatbot_analytics",
                "indexes": [
                    models.Index(
                        fields=["chatbot", "date"],
                        name="chatbot_ana_chatbot_4fdfe6_idx",
                    ),
                    models.Index(fields=["date"], name="chatbot_ana_date_eef877_idx"),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="chatbotanalytics",
            constraint=models.UniqueConstraint(
                fields=("chatbot", "date", "hour"), name="unique_analytics_per_hour"
            ),
        ),
        migrations.AddIndex(
            model_name="chatbot",
            index=models.Index(fields=["user"], name="chatbots_user_id_af155b_idx"),
        ),
        migrations.AddIndex(
            model_name="chatbot",
            index=models.Index(
                fields=["public_url_slug"], name="chatbots_public__f0fbc8_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="chatbot",
            index=models.Index(fields=["status"], name="chatbots_status_b39a38_idx"),
        ),
        migrations.AddIndex(
            model_name="chatbot",
            index=models.Index(
                fields=["created_at"], name="chatbots_created_06e8cf_idx"
            ),
        ),
        migrations.AddConstraint(
            model_name="chatbot",
            constraint=models.UniqueConstraint(
                fields=("user", "name"), name="unique_chatbot_name_per_user"
            ),
        ),
    ]
